<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>design_patterns</title>
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  </style>
  <link rel="stylesheet" href="style.css" />
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<blockquote>
<p>design patterns?</p>
</blockquote>
<ul>
<li><p>these are good solutions for common programming problems</p></li>
<li><p>singleton</p>
<ul>
<li>one instance class</li>
<li>for example we can store configuration values in singleton
class</li>
</ul></li>
<li><p>abstract factory</p>
<ul>
<li>can create different class instances with common interface
function</li>
<li>in C++ it is possible to add concrete classes with shared libraries
without changing abstract factory code</li>
</ul></li>
<li><p>Pimpl idiom (pointer to implementation idiom) aka opaque
pointer</p>
<ul>
<li>allows additional separation of interface from implementation
<ul>
<li>Luxoft -&gt; Citi -&gt; <code>dosa</code> -&gt;
<code>dosa_publisher</code> -&gt; <code>ProtoPublisher</code></li>
<li>Qt</li>
</ul></li>
</ul></li>
</ul>
<p><em>id</em>: <code>design_patterns</code></p>
</body>
</html>
